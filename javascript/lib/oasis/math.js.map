{"version":3,"file":"module.js","sources":["../src/enums/ContainmentType.ts","../src/enums/PlaneIntersectionType.ts","../src/MathUtil.ts","../src/Vector3.ts","../src/BoundingSphere.ts","../src/BoundingBox.ts","../src/CollisionUtil.ts","../src/Plane.ts","../src/BoundingFrustum.ts","../src/Matrix3x3.ts","../src/Quaternion.ts","../src/Matrix.ts","../src/Ray.ts","../src/Spherical.ts","../src/Vector2.ts","../src/Vector4.ts","../src/Color.ts"],"sourcesContent":["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n","/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n","/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone {\n  /** @internal zero.*/\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal one.*/\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left.x;\n    const ay = left.y;\n    const az = left.z;\n    const bx = right.x;\n    const by = right.y;\n    const bz = right.z;\n\n    out.x = ay * bz - az * by;\n    out.y = az * bx - ax * bz;\n    out.z = ax * by - ay * bx;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y) && MathUtil.equals(left.z, right.z);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { x, y, z } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { x, y, z } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z);\n    if (len > 0) {\n      // TODO\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often prefered for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8];\n    out.y = x * e[1] + y * e[5] + z * e[9];\n    out.z = x * e[2] + y * e[6] + z * e[10];\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + e[15];\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the wcomponent to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often prefered when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    let w = x * e[3] + y * e[7] + z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out.x = (x * e[0] + y * e[4] + z * e[8] + e[12]) * w;\n    out.y = (x * e[1] + y * e[5] + z * e[9] + e[13]) * w;\n    out.z = (x * e[2] + y * e[6] + z * e[10] + e[14]) * w;\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { x, y, z } = v;\n    const { x: qx, y: qy, z: qz, w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n  }\n\n  /** The x component of the vector.*/\n  x: number;\n  /** The y component of the vector.*/\n  y: number;\n  /** The z component of the vector.*/\n  z: number;\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number, z: number): Vector3 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y, z } = this;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector3): Vector3 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    return out;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often prefered for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the wcomponent to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often prefered when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @param out - This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && center.cloneTo(this.center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Clones this sphere to the specified sphere.\n   * @param out - The specified sphere\n   * @returns The specified sphere\n   */\n  cloneTo(out: BoundingSphere): BoundingSphere {\n    this.center.cloneTo(out.center);\n    out.radius = this.radius;\n    return out;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param shpere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(shpere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = shpere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transfrom a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);\n    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);\n    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);\n\n    // set min、max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && min.cloneTo(this.min);\n    max && max.cloneTo(this.max);\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Clones this box to the specified box.\n   * @param out - The specified box\n   * @returns The specified box\n   */\n  cloneTo(out: BoundingBox): BoundingBox {\n    this.min.cloneTo(out.min);\n    this.max.cloneTo(out.max);\n    return out;\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    Vector3.add(this.min, this.max, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    Vector3.subtract(this.max, this.min, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].setValue(minX, maxY, maxZ);\n    out[1].setValue(maxX, maxY, maxZ);\n    out[2].setValue(maxX, minY, maxZ);\n    out[3].setValue(minX, minY, maxZ);\n    out[4].setValue(minX, maxY, minZ);\n    out[5].setValue(maxX, maxY, minZ);\n    out[6].setValue(maxX, minY, minZ);\n    out[7].setValue(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transfrom a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const back = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      back.x = normal.x >= 0 ? min.x : max.x;\n      back.y = normal.y >= 0 ? min.y : max.y;\n      back.z = normal.z >= 0 ? min.z : max.z;\n      if (Vector3.dot(plane.normal, back) > -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        front.x = max.x;\n        back.x = min.x;\n      } else {\n        front.x = min.x;\n        back.x = max.x;\n      }\n      if (normal.y >= 0) {\n        front.y = max.y;\n        back.y = min.y;\n      } else {\n        front.y = min.y;\n        back.y = max.y;\n      }\n      if (normal.z >= 0) {\n        front.z = max.z;\n        back.z = min.z;\n      } else {\n        front.z = min.z;\n        back.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, back) === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, front) === PlaneIntersectionType.Front) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three dimensional space.\n */\nexport class Plane implements IClone {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n    const factor = 1.0 / normal.length();\n\n    const outNormal = out.normal;\n    outNormal.x = normal.x * factor;\n    outNormal.y = normal.y * factor;\n    outNormal.z = normal.z * factor;\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && normal.cloneTo(this.normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    this.cloneTo(out);\n    return out;\n  }\n\n  /**\n   * Clones this plane to the specified plane.\n   * @param out - The specified plane\n   * @returns The specified plane\n   */\n  cloneTo(out: Plane): Plane {\n    this.normal.cloneTo(out.normal);\n    out.distance = this.distance;\n    return out;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const bf = new BoundingFrustum();\n    this.cloneTo(bf);\n    return bf;\n  }\n\n  /**\n   * Clones this frustum to the specified frustum.\n   * @param out - The specified frustum\n   * @returns The specified frustum\n   */\n  cloneTo(out: BoundingFrustum): BoundingFrustum {\n    this.near.cloneTo(out.near);\n    this.far.cloneTo(out.far);\n    this.left.cloneTo(out.left);\n    this.right.cloneTo(out.right);\n    this.top.cloneTo(out.top);\n    this.bottom.cloneTo(out.bottom);\n    return out;\n  }\n\n  /**\n   * Get the plane by the given index.\n   * 0: near\n   * 1: far\n   * 2: left\n   * 3: right\n   * 4: top\n   * 5: bottom\n   * @param index - The index\n   * @returns The plane get\n   */\n  getPlane(index: number): Plane {\n    switch (index) {\n      case 0:\n        return this.near;\n      case 1:\n        return this.far;\n      case 2:\n        return this.left;\n      case 3:\n        return this.right;\n      case 4:\n        return this.top;\n      case 5:\n        return this.bottom;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.x = -m14 - m13;\n    nearNormal.y = -m24 - m23;\n    nearNormal.z = -m34 - m33;\n    this.near.distance = -m44 - m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.x = m13 - m14;\n    farNormal.y = m23 - m24;\n    farNormal.z = m33 - m34;\n    this.far.distance = m43 - m44;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.x = -m14 - m11;\n    leftNormal.y = -m24 - m21;\n    leftNormal.z = -m34 - m31;\n    this.left.distance = -m44 - m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.x = m11 - m14;\n    rightNormal.y = m21 - m24;\n    rightNormal.z = m31 - m34;\n    this.right.distance = m41 - m44;\n    this.right.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.x = m12 - m14;\n    topNormal.y = m22 - m24;\n    topNormal.z = m32 - m34;\n    this.top.distance = m42 - m44;\n    this.top.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.x = -m14 - m12;\n    bottomNormal.y = -m24 - m22;\n    bottomNormal.z = -m34 - m32;\n    this.bottom.distance = -m44 - m42;\n    this.bottom.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { x, y, z, w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s.y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation.x;\n    oe[7] = translation.y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { x, y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { x, y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this matrix by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Set the value of this 3x3 matrix by the specified 4x4 matrix.\n   * upper-left principle\n   * @param a - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  setValueByMatrix(a: Matrix): Matrix3x3 {\n    const ae = a.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n\n  /**\n   * Clone the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Clones this matrix to the specified matrix.\n   * @param out - The specified matrix\n   * @returns The specified matrix\n   */\n  cloneTo(out: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n\n    oe[3] = e[3];\n    oe[4] = e[4];\n    oe[5] = e[5];\n\n    oe[6] = e[6];\n    oe[7] = e[7];\n    oe[8] = e[8];\n\n    return out;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left.x,\n      ay = left.y,\n      az = left.z,\n      aw = left.w;\n    const bx = right.x,\n      by = right.y,\n      bz = right.z,\n      bw = right.w;\n\n    out.x = ax * bw + aw * bx + ay * bz - az * by;\n    out.y = ay * bw + aw * by + az * bx - ax * bz;\n    out.z = az * bw + aw * bz + ax * by - ay * bx;\n    out.w = aw * bw - ax * bx - ay * by - az * bz;\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = a.w;\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out.x = normalAxis.x * s;\n    out.y = normalAxis.y * s;\n    out.z = normalAxis.z * s;\n    out.w = Math.cos(rad);\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out.z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out.w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out.w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out.x = (m23 - m32) * sqrt;\n      out.y = (m31 - m13) * sqrt;\n      out.z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = 0.5 * sqrt;\n      out.y = (m12 + m21) * half;\n      out.z = (m13 + m31) * half;\n      out.w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = (m21 + m12) * half;\n      out.y = 0.5 * sqrt;\n      out.z = (m32 + m23) * half;\n      out.w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out.x = (m13 + m31) * half;\n      out.y = (m23 + m32) * half;\n      out.z = 0.5 * sqrt;\n      out.w = (m12 - m21) * half;\n    }\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out.x = -x * invDot;\n      out.y = -y * invDot;\n      out.z = -z * invDot;\n      out.w = w * invDot;\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out.x = start.x * inv + end.x * t;\n      out.y = start.y * inv + end.y * t;\n      out.z = start.z * inv + end.z * t;\n      out.w = start.w * inv + end.w * t;\n    } else {\n      out.x = start.x * inv - end.x * t;\n      out.y = start.y * inv - end.y * t;\n      out.z = start.z * inv - end.z * t;\n      out.w = start.w * inv - end.w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const ax = start.x;\n    const ay = start.y;\n    const az = start.z;\n    const aw = start.w;\n    let bx = end.x;\n    let by = end.y;\n    let bz = end.z;\n    let bw = end.w;\n\n    let scale0, scale1;\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > MathUtil.zeroTolerance) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out.x = scale0 * ax + scale1 * bx;\n    out.y = scale0 * ay + scale1 * by;\n    out.z = scale0 * az + scale1 * bz;\n    out.w = scale0 * aw + scale1 * bw;\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = s;\n    out.y = 0;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = s;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = 0;\n    out.z = s;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + w * bx;\n    out.y = y * bw + z * bx;\n    out.z = z * bw - y * bx;\n    out.w = w * bw - x * bx;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw - z * by;\n    out.y = y * bw + w * by;\n    out.z = z * bw + x * by;\n    out.w = w * bw - y * by;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + y * bz;\n    out.y = y * bw - x * bz;\n    out.z = z * bw + w * bz;\n    out.w = w * bw - z * bz;\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /** The x component of the quaternion. */\n  x: number;\n  /** The y component of the quaternion. */\n  y: number;\n  /** The z component of the quaternion. */\n  z: number;\n  /** The w component of the quaternion. */\n  w: number;\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  setValue(x: number, y: number, z: number, w: number): Quaternion {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this quaternion by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { x, y, z } = this;\n    const length = x * x + y * y + z * z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out.x = 1;\n      out.y = 0;\n      out.z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out.x = this.x * inv;\n      out.y = this.y * inv;\n      out.z = this.z * inv;\n\n      return Math.acos(this.w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this.toYawPitchRoll(out);\n    const t = out.x;\n    out.x = out.y;\n    out.y = t;\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    const { x, y, z, w } = this;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const xy = x * y;\n    const zw = z * w;\n    const zx = z * x;\n    const yw = y * w;\n    const yz = y * z;\n    const xw = x * w;\n\n    out.y = Math.asin(2.0 * (xw - yz));\n    if (Math.cos(out.y) > MathUtil.zeroTolerance) {\n      out.z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));\n      out.x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));\n    } else {\n      out.z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));\n      out.x = 0.0;\n    }\n\n    return out;\n  }\n\n  /**\n   * Clone the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * Clones this quaternion to the specified quaternion.\n   * @param out - The specified quaternion\n   * @returns The specified quaternion\n   */\n  cloneTo(out: Quaternion): Quaternion {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2],\n      l14 = le[3];\n    const l21 = le[4],\n      l22 = le[5],\n      l23 = le[6],\n      l24 = le[7];\n    const l31 = le[8],\n      l32 = le[9],\n      l33 = le[10],\n      l34 = le[11];\n    const l41 = le[12],\n      l42 = le[13],\n      l43 = le[14],\n      l44 = le[15];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2],\n      r14 = re[3];\n    const r21 = re[4],\n      r22 = re[5],\n      r23 = re[6],\n      r24 = re[7];\n    const r31 = re[8],\n      r32 = re[9],\n      r33 = re[10],\n      r34 = re[11];\n    const r41 = re[12],\n      r42 = re[13],\n      r43 = re[14],\n      r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale.x;\n    let sy = scale.y;\n    let sz = scale.z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s.y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s.z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis.x;\n    oe[1] = yAxis.x;\n    oe[2] = zAxis.x;\n    oe[3] = 0;\n\n    oe[4] = xAxis.y;\n    oe[5] = yAxis.y;\n    oe[6] = zAxis.y;\n    oe[7] = 0;\n\n    oe[8] = xAxis.z;\n    oe[9] = yAxis.z;\n    oe[10] = zAxis.z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovy - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovy: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovy / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this matrix by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Clone the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Clones this matrix to the specified matrix.\n   * @param out - The specified matrix\n   * @returns The specified matrix\n   */\n  cloneTo(out: Matrix): Matrix {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n    oe[3] = e[3];\n\n    oe[4] = e[4];\n    oe[5] = e[5];\n    oe[6] = e[6];\n    oe[7] = e[7];\n\n    oe[8] = e[8];\n    oe[9] = e[9];\n    oe[10] = e[10];\n    oe[11] = e[11];\n\n    oe[12] = e[12];\n    oe[13] = e[13];\n    oe[14] = e[14];\n    oe[15] = e[15];\n\n    return out;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m14 = e[3];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m24 = e[7];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    const m34 = e[11];\n\n    translation.x = e[12];\n    translation.y = e[13];\n    translation.z = e[14];\n\n    const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;\n    const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;\n    const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;\n\n    const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    scale.x = sx;\n    scale.y = sy;\n    scale.z = sz;\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let S = Math.sqrt(trace + 1.0) * 2;\n      out.w = 0.25 * S;\n      out.x = (e[6] - e[9]) / S;\n      out.y = (e[8] - e[2]) / S;\n      out.z = (e[1] - e[4]) / S;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let S = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out.w = (e[6] - e[9]) / S;\n      out.x = 0.25 * S;\n      out.y = (e[1] + e[4]) / S;\n      out.z = (e[8] + e[2]) / S;\n    } else if (e[5] > e[10]) {\n      let S = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out.w = (e[8] - e[2]) / S;\n      out.x = (e[1] + e[4]) / S;\n      out.y = 0.25 * S;\n      out.z = (e[6] + e[9]) / S;\n    } else {\n      let S = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out.w = (e[1] - e[4]) / S;\n      out.x = (e[8] + e[2]) / S;\n      out.y = (e[6] + e[9]) / S;\n      out.z = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n\n    out.x = e[12];\n    out.y = e[13];\n    out.z = e[14];\n\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && origin.cloneTo(this.origin);\n    direction && direction.cloneTo(this.direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Vector3 } from \"./Vector3\";\n\n// Prevent gimbal lock.\nconst ESP = MathUtil.zeroTolerance;\n\n// Spherical.\nexport class Spherical {\n  public radius;\n  public phi;\n  public theta;\n\n  constructor(radius?, phi?, theta?) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0;\n    this.theta = theta !== undefined ? theta : 0;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n\n    return this;\n  }\n\n  makeSafe() {\n    this.phi = MathUtil.clamp(this.phi, ESP, Math.PI - ESP);\n    return this;\n  }\n\n  setFromVec3(v3: Vector3) {\n    this.radius = v3.length();\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v3.x, v3.z);\n      this.phi = Math.acos(MathUtil.clamp(v3.y / this.radius, -1, 1));\n    }\n\n    return this;\n  }\n\n  setToVec3(v3: Vector3) {\n    const sinPhiRadius = Math.sin(this.phi) * this.radius;\n\n    v3.x = sinPhiRadius * Math.sin(this.theta);\n    v3.y = Math.cos(this.phi) * this.radius;\n    v3.z = sinPhiRadius * Math.cos(this.theta);\n\n    return this;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone {\n  /** @internal zero.*/\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal one.*/\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left.x * right.x + left.y * right.y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { x, y } = left;\n    out.x = x + (right.x - x) * t;\n    out.y = y + (right.y - y) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out.x = -left.x;\n    out.y = -left.y;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { x, y } = left;\n    let len: number = Math.sqrt(x * x + y * y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param scale - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out.x = left.x * s;\n    out.y = left.y * s;\n  }\n\n  /** The x component of the vector. */\n  x: number;\n  /** The y component of the vector. */\n  y: number;\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number): Vector2 {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this.x += right.x;\n    this.y += right.y;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this.x -= right.x;\n    this.y -= right.y;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this.x *= right.x;\n    this.y *= right.y;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this.x /= right.x;\n    this.y /= right.y;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y } = this;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y } = this;\n    return x * x + y * y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this.x *= s;\n    this.y *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector2): Vector2 {\n    out.x = this.x;\n    out.y = this.y;\n    return out;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone {\n  /** @internal zero.*/\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal one.*/\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n    out.w = left.w - right.w;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n    out.w = left.w * right.w;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n    out.w = left.w / right.w;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { x, y, z, w } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n    out.w = w + (end.w - w) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n    out.w = Math.max(left.w, right.w);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n    out.w = Math.min(left.w, right.w);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = -a.w;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8] + w * e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + w * e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + w * e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + w * e[15];\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const qx = q.x;\n    const qy = q.y;\n    const qz = q.z;\n    const qw = q.w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out.w = w;\n  }\n\n  /** The x component of the vector. */\n  x: number;\n  /** The y component of the vector. */\n  y: number;\n  /** The z component of the vector. */\n  z: number;\n  /** The w component of the vector. */\n  w: number;\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number, z: number, w: number): Vector4 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    this.w += right.w;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    this.w -= right.w;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    this.w *= right.w;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    this.w /= right.w;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    this.w *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this.x, this.y, this.z, this.w);\n    return ret;\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector4): Vector4 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left.r, right.r) &&\n      MathUtil.equals(left.g, right.g) &&\n      MathUtil.equals(left.b, right.b) &&\n      MathUtil.equals(left.a, right.a)\n    );\n  }\n\n  /** The red component of the color, 0~1. */\n  public r: number;\n  /** The green component of the color, 0~1. */\n  public g: number;\n  /** The blue component of the color, 0~1. */\n  public b: number;\n  /** The alpha component of the color, 0~1. */\n  public a: number;\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this.r, this.g, this.b, this.a);\n    return ret;\n  }\n\n  /**\n   * Clones this color to the specified color.\n   * @param out - The specified color\n   * @returns The specified color\n   */\n  cloneTo(out: Color): Color {\n    out.r = this.r;\n    out.g = this.g;\n    out.b = this.b;\n    out.a = this.a;\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out.r = Color.gammaToLinearSpace(this.r);\n    out.g = Color.gammaToLinearSpace(this.g);\n    out.b = Color.gammaToLinearSpace(this.b);\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out.r = Color.linearToGammaSpace(this.r);\n    out.g = Color.linearToGammaSpace(this.g);\n    out.b = Color.linearToGammaSpace(this.b);\n    return out;\n  }\n}\n"],"names":["ContainmentType","PlaneIntersectionType","MathUtil","clamp","v","min","max","Math","equals","a","b","abs","zeroTolerance","isPowerOf2","radianToDegree","r","radToDegreeFactor","degreeToRadian","d","degreeToRadFactor","PI","Vector3","add","left","right","out","x","y","z","subtract","multiply","divide","dot","cross","ax","ay","az","bx","by","bz","distance","sqrt","distanceSquared","lerp","start","end","t","negate","normalize","len","scale","s","transformNormal","m","e","elements","transformToVec3","transformToVec4","w","transformCoordinate","transformByQuat","quaternion","qx","qy","qz","qw","ix","iy","iz","iw","setValue","setValueByArray","array","offset","length","lengthSquared","toArray","outOffset","clone","cloneTo","_zero","_one","_tempVector3","BoundingSphere","fromPoints","points","Error","center","_tempVec30","i","radius","fromBox","box","BoundingBox","fromCenterAndExtent","extent","Number","MAX_VALUE","l","point","fromSphere","shpere","transform","source","matrix","_tempVec31","getCenter","getExtent","merge","box1","box2","getCorners","minX","minY","minZ","maxX","maxY","maxZ","CollisionUtil","distancePlaneAndPoint","plane","normal","intersectsPlaneAndPoint","Front","Back","Intersecting","intersectsPlaneAndBox","front","back","intersectsPlaneAndSphere","sphere","intersectsRayAndPlane","ray","dir","direction","position","origin","intersectsRayAndBox","dirX","dirY","dirZ","oriX","oriY","oriZ","tmax","inverse","t1","t2","temp","intersectsRayAndSphere","c","discriminant","intersectsFrustumAndBox","frustum","getPlane","frustumContainsBox","result","Contains","Disjoint","Intersects","frustumContainsSphere","intersectionType","Plane","p","factor","outNormal","point0","point1","point2","x0","y0","z0","x1","y1","z1","x2","y2","z2","yz","xz","xy","invPyth","BoundingFrustum","near","far","top","bottom","calculateFromMatrix","bf","index","me","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","nearNormal","farNormal","leftNormal","rightNormal","topNormal","bottomNormal","intersectsBox","intersectsSphere","Matrix3x3","le","re","oe","l11","l12","l13","l21","l22","l23","l31","l32","l33","r11","r12","r13","r21","r22","r23","r31","r32","r33","rotationQuaternion","xx","yx","yy","zx","zy","zz","wx","wy","wz","scaling","translation","invert","ae","a11","a12","a13","a21","a22","a23","a31","a32","a33","b12","b22","b32","det","normalMatrix","mat4","a14","a24","a34","a41","a42","a43","a44","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","rotate","sin","cos","translate","transpose","Float32Array","srce","setValueByMatrix","ret","determinant","identity","Quaternion","aw","bw","conjugate","rotationAxisAngle","axis","rad","normalAxis","rotationEuler","rotationYawPitchRoll","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","cosYawPitch","sinYawPitch","rotationMatrix3x3","half","invDot","inv","slerp","scale0","scale1","cosom","omega","acos","sinom","rotationX","rotationY","rotationZ","rotateX","rotateY","rotateZ","getAxisAngle","toEuler","toYawPitchRoll","zw","yw","xw","asin","atan2","quat","Matrix","l14","l24","l34","l41","l42","l43","l44","r14","r24","r34","r41","r42","r43","r44","rotationTranslation","affineTransformation","rotation","sx","sy","sz","lookAt","eye","target","up","xAxis","yAxis","zAxis","_tempVec32","ortho","lr","bt","nf","perspective","fovy","aspect","f","tan","rotateAxisAngle","b13","b21","b23","b31","b33","decompose","rm","_tempMat30","rme","xs","sign","ys","zs","invSX","invSY","invSZ","getRotation","trace","S","getScaling","getTranslation","_identity","Ray","intersectPlane","intersectSphere","intersectBox","getPoint","ESP","Spherical","phi","theta","undefined","set","makeSafe","setFromVec3","v3","setToVec3","sinPhiRadius","Vector2","Vector4","q","Color","gammaToLinearSpace","value","pow","linearToGammaSpace","g","toLinear","toGamma"],"mappings":"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"}